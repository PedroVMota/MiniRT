 Ambient lightning:
A 0.2 255,255,255
∗ identifier: A
∗ ambient lighting ratio in range [0.0,1.0]: 0.2
∗ R,G,B colors in range [0-255]: 255, 255, 255


Camera:
C -50.0,0,20 0,0,1 70
∗ identifier: C
∗ x,y,z coordinates of the view point: -50.0,0,20
∗ 3d normalized orientation vector. In range [-1,1] for each x,y,z axis: 0.0,0.0,1.0
∗ FOV : Horizontal field of view in degrees in range [0,180]: 70

Light:
L -40.0,50.0,0.0 0.6 10,0,255
∗ identifier: L
∗ x,y,z coordinates of the light point: -40.0,50.0,0.0
∗ the light brightness ratio in range [0.0,1.0]: 0.6
∗ (unused in mandatory part)R,G,B colors in range [0-255]: 10, 0, 255

Sphere:
sp 0.0,0.0,20.6 12.6 10,0,255
∗ identifier: sp
∗ x,y,z coordinates of the sphere center: 0.0,0.0,20.6
∗ the sphere diameter: 12.6
∗ R,G,B colors in range [0-255]: 10, 0, 255

Plane:
pl 0.0,0.0,-10.0 0.0,1.0,0.0 0,0,225
∗ identifier: pl
∗ x,y,z coordinates of a point in the plane: 0.0,0.0,-10.0
∗ 3d normalized normal vector. In range [-1,1] for each x,y,z axis: 0.0,1.0,0.0
∗ R,G,B colors in range [0-255]: 0,0,225

Cylinder:
cy 50.0,0.0,20.6 0.0,0.0,1.0 14.2 21.42 10,0,255
∗ identifier: cy
∗ x,y,z coordinates of the center of the cylinder: 50.0,0.0,20.6
∗ 3d normalized vector of axis of cylinder. In range [-1,1] for each x,y,z axis:
0.0,0.0,1.0
∗ the cylinder diameter: 14.2
∗ the cylinder height: 21.42
∗ R,G,B colors in range [0,255]: 10, 0, 255



to draw a sphere

(x - h)^2 + (y - k)^2 + (z - l)^2 = r^2

x is the x coordinate of the point
y is the y coordinate of the point
z is the z coordinate of the point
h is the x coordinate of the center of the circle
k is the y coordinate of the center of the circle
l is the z coordinate of the center of the circle

r is the radius of the circle

start the ray origin. and move along the ray direction for some distance.

|| P + D * dst - C ||^2 = r^2

when the square values equals to r^2, thats mean the point is on the circle

to have the distance

dst = -Pos . Dir + sqrt(Pos . Dir)^2 - (Pos . Pos - r^2)
this formula is for the sphere, this formula is called the quadratic formula


that means that the distance between the point and the center of the circle is equal to the radius of the circle



Pseudo Code for ray intersection.

function raySphereIntersection(ray_origin, ray_direction, sphere_center, sphere_radius):
    // Compute the vector from the ray's origin to the sphere's center
	sphere_to_ray = sphere_center - ray_origin

    // Compute the projection of sphere_to_ray onto the ray direction
    projection = dot(sphere_to_ray, ray_direction)

    // Compute the distance from the ray's origin to the closest point on the ray
    closest_point_distance = length(projection * ray_direction)

    // If the closest point is behind the ray's origin, there is no intersection
    if closest_point_distance < 0:
        return false

    // Compute the distance from the sphere's center to the closest point on the ray
    distance_to_center = length(sphere_to_ray)

    // If the distance to the closest point is greater than the sphere's radius, no intersection
    if distance_to_center > sphere_radius:
        return false

    // Check if the ray starts inside the sphere
    inside_sphere = distance_to_center < sphere_radius

    // If the ray starts inside the sphere and points away, there is no intersection
    if inside_sphere and projection < 0:
        return false

    // Compute the distance along the ray to the intersection point
    intersection_distance = projection - sqrt(sphere_radius^2 - closest_point_distance^2)

    // If the intersection distance is negative, the intersection point is behind the ray's origin
    if intersection_distance < 0:
        return false

    // The ray intersects the sphere
    return true
